/*
This class is accessible as window.hyperLink
*/

import type {
  Connection,
  SendOptions,
  TransactionSignature,
} from "@solana/web3.js";
import { VersionedTransaction } from "@solana/web3.js";
import { PublicKey } from "@solana/web3.js";
import type {
  SendTransactionOptions,
  TransactionOrVersionedTransaction,
  WalletAdapterNetwork,
} from "@solana/wallet-adapter-base";
import { Transaction } from "@solana/web3.js";
import { documentReady, htmlToElement } from "./embedUtils";
import type { HYPERLINK_BUILD_ENV_TYPE } from "./interfaces";

import {
  checkAndAttachHyperLinkInstance,
  getCloseButtonUrl,
  getHyperLinkUrl,
  iFrameUrl,
  isElement,
  removePreviousWindowRef,
  HyperLinkInstanceKey,
} from "./utils";
import type {
  CloseFn,
  PostFn,
  WindowCallbacks,
  WindowOpenParams,
} from "./window";
import { CallbackType, WindowCommunicator } from "./window";
import {
  EventEmitter,
  WalletSendTransactionError,
  WalletSignTransactionError,
  isVersionedTransaction,
} from "@solana/wallet-adapter-base";
import type {
  SolanaSignInInput,
  SolanaSignInOutput,
} from "@solana/wallet-standard-features";
import {
  SolanaSignAndSendTransaction,
  SolanaSignTransaction,
  SolanaSignMessage,
  SolanaSignIn,
} from "@solana/wallet-standard-features";
import {
  createSignInMessage,
  type SolanaSignInInputWithRequiredFields,
} from "@solana/wallet-standard-util";
import { v4 as uuid } from "uuid";
import type { CustomSolanaSignInInput } from "./index.js";
import {
  NPM_VERSION,
  type HyperLinkWalletAdapterTheme,
  EmbeddedWalletPage,
} from "./index.js";
import { SOLANA_MAINNET_CHAIN } from "@solana/wallet-standard-chains";
import { ReadonlyWalletAccount } from "@wallet-standard/wallet";
import { showDialog } from "./dialog.js";
import interact from "interactjs";
import { Buffer } from "buffer";

export interface HyperLinkEmbedEvents {
  connect(...args: unknown[]): unknown;
  disconnect(...args: unknown[]): unknown;
  accountChanged(...args: unknown[]): unknown;
  accountChanged(newPublicKeyString: string): unknown;
}

export enum PopupType {
  MESSAGE,
  TRANSACTION,
  LOGIN,
  NOT_ALLOWLISTED,
}

const EDGE_OFFSET = 20;
const EXPAND_THRESHOLD = 20;
const MOBILE_BREAKPOINT = 476;
const WIDGET_ID_PREFIX = "tiplink-widget-draggable";
const IFRAME_ID_PREFIX = "hyperLinkIframe";
const WIDGET_DIMENSION = {
  HEIGHT: {
    COLLAPSED: 54,
    MOBILE: 54,
    DESKTOP: 72,
  },
  WIDTH: {
    COLLAPSED: 20,
    MOBILE: 77,
    DESKTOP: 101,
  },
};

function widgetId(id: string) {
  return `${WIDGET_ID_PREFIX}-${id}`;
}

function iframeId(id: string) {
  return `${IFRAME_ID_PREFIX}-${id}`;
}

function preventDefaultScroll(event: TouchEvent | Event) {
  event.preventDefault();
}

function bottom() {
  return window.innerHeight;
}

function right() {
  return window.innerWidth;
}

function isMobileDimension() {
  return right() <= MOBILE_BREAKPOINT;
}

function getStableWidgetHeight(isCollapsedUi?: boolean) {
  if (isCollapsedUi) {
    return WIDGET_DIMENSION.HEIGHT.COLLAPSED;
  }
  return isMobileDimension()
    ? WIDGET_DIMENSION.HEIGHT.MOBILE
    : WIDGET_DIMENSION.HEIGHT.DESKTOP;
}

function getStableWidgetWidth(isCollapsedUi?: boolean) {
  if (isCollapsedUi) {
    return WIDGET_DIMENSION.WIDTH.COLLAPSED;
  }
  return isMobileDimension()
    ? WIDGET_DIMENSION.WIDTH.MOBILE
    : WIDGET_DIMENSION.WIDTH.DESKTOP;
}

function getEdgetOffset(
  isOnLeftSide: boolean,
  isCollapsedUi: boolean,
  widgetWidth: number
) {
  if (isOnLeftSide) {
    return isCollapsedUi ? 0 : EDGE_OFFSET;
  }
  return isCollapsedUi ? widgetWidth : widgetWidth + EDGE_OFFSET;
}

function getWidgetUIMetadata(widget: HTMLDivElement, x: number) {
  const vw = right();
  const vh = bottom();
  const isOnLeftSide = x < (vw - EDGE_OFFSET) / 2;
  const isCollapsedUi = widget.classList.contains("hyperLinkWidget_collapsed");
  const widgetWidth = getStableWidgetWidth(isCollapsedUi);
  const widgetHeight = getStableWidgetHeight(isCollapsedUi);
  const offset = getEdgetOffset(isOnLeftSide, isCollapsedUi, widgetWidth);
  return {
    vw,
    vh,
    offset,
    widgetHeight,
    widgetWidth,
  };
}

function getWidgetAttributes(widget: HTMLDivElement) {
  const vh = bottom();
  const dataXAttr = widget.getAttribute("data-x");
  const dataYAttr = widget.getAttribute("data-y");
  const dataWinYAttr = widget.getAttribute("data-vh");
  const dataPrevXAttr = widget.getAttribute("data-x-prev");
  const parsedPrevX = dataPrevXAttr ? parseFloat(dataPrevXAttr) : 0;
  const parsedX = dataXAttr ? parseFloat(dataXAttr) : 0;
  const parsedY = dataYAttr ? parseFloat(dataYAttr) : 0;
  const parsedVh = dataWinYAttr ? parseFloat(dataWinYAttr) : vh;
  return {
    parsedX,
    parsedY,
    parsedVh,
    parsedPrevX,
  };
}

function updateWidgetPosStyleAndAttributes(
  widget: HTMLDivElement,
  x: number,
  y: number
) {
  widget.style.transform = `translate(${x}px, ${y}px)`;
  widget.setAttribute("data-x", x + "");
  widget.setAttribute("data-y", y + "");
  widget.setAttribute("data-vh", bottom() + "");
}

function isBottomCornerPosition(y: number, vh: number, widget: HTMLDivElement) {
  const isCollapsedUi = widget.classList.contains("hyperLinkWidget_collapsed");
  const widgetHeight = getStableWidgetHeight(isCollapsedUi);
  const maxY = vh - widgetHeight - EDGE_OFFSET;
  const bottomBuffer = EDGE_OFFSET; // additional range
  return Math.abs(maxY - y) <= bottomBuffer;
}

function stickToNearestCorner(
  x: number,
  y: number,
  widget: HTMLDivElement
): { x: number; y: number } {
  const { vw, vh, offset, widgetHeight } = getWidgetUIMetadata(widget, x);
  const stickyX = x < (vw - EDGE_OFFSET) / 2 ? offset : vw - offset;
  const stickyY =
    y < (vh - EDGE_OFFSET) / 2 ? EDGE_OFFSET : vh - widgetHeight - EDGE_OFFSET;
  return {
    x: stickyX,
    y: stickyY,
  };
}

function stickToNearestSideEdge(
  x: number,
  y: number,
  widget: HTMLDivElement
): { x: number; y: number } {
  const { vw, vh, offset, widgetHeight } = getWidgetUIMetadata(widget, x);
  const nearestSideX = x < (vw - EDGE_OFFSET) / 2 ? offset : vw - offset;
  const boundaryY =
    y < (vh - EDGE_OFFSET) / 2
      ? Math.max(EDGE_OFFSET, y)
      : Math.min(vh - widgetHeight - EDGE_OFFSET, y);
  widget.setAttribute("data-vh", vh + "");
  return {
    x: nearestSideX,
    y: boundaryY,
  };
}

function showExpandedWalletWidget(
  widgetElement: HTMLDivElement,
  theme?: string
) {
  const widgetLogo = document?.getElementById("tiplink-widget-logo");
  const widgetLabel = document?.getElementById("tiplink-widget-text");
  const widgetChevron = document?.getElementById("tiplink-widget-chevron");
  const widgetNotif = document?.getElementById("tiplink-widget-notif");
  if (widgetLogo) {
    widgetLogo.style.display = "block";
  }
  if (widgetLabel) {
    widgetLabel.style.display = "block";
  }
  if (widgetChevron) {
    widgetChevron.style.display = "none";
  }
  if (
    widgetNotif &&
    widgetNotif.classList.contains("tiplinkWidget_notif_show")
  ) {
    widgetNotif.style.removeProperty("left");
    widgetNotif.style.setProperty("right", "-4px");
  }

  updateWalletWidgetClassNames(widgetElement, theme, false);
}

function showCollapsedWalletWidget(
  widgetElement: HTMLDivElement,
  theme?: string,
  isOnLeftSide?: boolean
) {
  // don't collapse on desktop dimension right-side
  const vw = right();
  if (vw > 476 && !isOnLeftSide) return;
  const widgetLogo = document?.getElementById("tiplink-widget-logo");
  const widgetLabel = document?.getElementById("tiplink-widget-text");
  const widgetChevron = document?.getElementById("tiplink-widget-chevron");
  const widgetNotif = document?.getElementById("tiplink-widget-notif");
  if (widgetLogo) {
    widgetLogo.style.display = "none";
  }
  if (widgetLabel) {
    widgetLabel.style.display = "none";
  }
  if (widgetChevron) {
    widgetChevron.style.display = "block";
    widgetChevron.style.transform = isOnLeftSide
      ? "rotate(0)"
      : "rotate(180deg)";
  }
  if (
    widgetNotif &&
    widgetNotif.classList.contains("tiplinkWidget_notif_show") &&
    !isOnLeftSide
  ) {
    widgetNotif.style.removeProperty("right");
    widgetNotif.style.setProperty("left", "-4px");
  }

  updateWalletWidgetClassNames(widgetElement, theme, true, isOnLeftSide);
}

function setupTouchIntercept() {
  document.body.addEventListener("touchmove", preventDefaultScroll, {
    passive: false,
  });
  window.addEventListener("scroll", preventDefaultScroll, {
    passive: false,
  });
  document.body.style.touchAction = "none";
}

function teardownTouchIntercept() {
  document.body.removeEventListener("touchmove", preventDefaultScroll);
  window.removeEventListener("scroll", preventDefaultScroll);
  document.body.style.touchAction = "";
}

function setupWalletWidgetClassNames(
  theme?: string, // Explicitly define allowed theme values
  isCollapsed?: boolean,
  isLeftSide?: boolean,
  isOnMount?: boolean
) {
  const classNames: string[] = [];

  if (isCollapsed) {
    classNames.push(
      "hyperLinkWidget_collapsed",
      isLeftSide
        ? "hyperLinkWidget_collapsed_left"
        : "hyperLinkWidget_collapsed_right"
    );
  } else {
    classNames.push("hyperLinkWidget_expanded");
  }

  if (isOnMount) {
    classNames.push("hyperLinkWidget_enter");
  }

  switch (theme) {
    case "dark":
      classNames.push("hyperLinkWidget_dark");
      break;
    case "light":
      classNames.push("hyperLinkWidget_light");
      break;
    case "system":
    default:
      classNames.push("tiplinkWidget_system");
  }
  return classNames.join(" ");
}

function updateWalletWidgetClassNames(
  widgetElement: HTMLDivElement,
  theme?: string,
  isCollapsed?: boolean,
  isOnLeftSide?: boolean
) {
  const className = setupWalletWidgetClassNames(
    theme,
    isCollapsed,
    isOnLeftSide
  );
  widgetElement.setAttribute("class", className);
}

function setupWalletWidgetIconSvg() {
  return `<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
 width="80px" viewBox="0 0 3840 2160" enable-background="new 0 0 3840 2160" xml:space="preserve">

<path fill="#0E0901" opacity="1.000000" stroke="none" 
d="
M2815.473145,938.636353 
C2819.628418,967.790283 2824.131836,996.045532 2827.339355,1024.447144 
C2829.351562,1042.264526 2829.722656,1060.292358 2830.284424,1078.242676 
C2831.168457,1106.480225 2831.543457,1134.799805 2829.515625,1162.941772 
C2827.319336,1193.421509 2823.819336,1223.877197 2819.287354,1254.103394 
C2811.469238,1306.244507 2797.956055,1357.045532 2780.696289,1406.886353 
C2761.993652,1460.893677 2738.202881,1512.524414 2709.688477,1562.012329 
C2680.327637,1612.970093 2646.236816,1660.604126 2607.562256,1704.855469 
C2558.706787,1760.755859 2503.843018,1810.074463 2442.989746,1852.699219 
C2387.633545,1891.473633 2328.635498,1923.595947 2266.150879,1949.212646 
C2203.057373,1975.078857 2137.764893,1993.436646 2070.412598,2004.223511 
C2037.890503,2009.432129 2005.249268,2013.819458 1972.239014,2014.413330 
C1942.965942,2014.940186 1913.629028,2016.769165 1884.429199,2015.505737 
C1820.472290,2012.738647 1757.335815,2003.531860 1695.250122,1987.438599 
C1618.383179,1967.514038 1545.466919,1937.958130 1476.352661,1898.930054 
C1475.772583,1898.602539 1475.223633,1898.220093 1474.644409,1897.891479 
C1466.318115,1893.167725 1466.258789,1893.094482 1458.976074,1898.834717 
C1441.449585,1912.649292 1423.967773,1926.520508 1406.496338,1940.404297 
C1324.360840,2005.674316 1242.243042,2070.966797 1160.084229,2136.207275 
C1155.266846,2140.032715 1150.498535,2144.720459 1142.188721,2140.619385 
C1221.592773,2039.537231 1300.706177,1938.824951 1380.467163,1837.288452 
C1377.668091,1834.844238 1375.380005,1832.603638 1372.852905,1830.676147 
C1339.173706,1804.987427 1307.302002,1777.189087 1277.622925,1747.007446 
C1216.311157,1684.657471 1164.542969,1615.206543 1123.032959,1538.103027 
C1076.840942,1452.302856 1045.215698,1361.465820 1028.671997,1265.536011 
C1023.481384,1235.437866 1020.720032,1204.883789 1017.786743,1174.447754 
C1016.098511,1156.930542 1015.900146,1139.235474 1015.737671,1121.614014 
C1015.526489,1098.709839 1015.040894,1075.738525 1016.463257,1052.907471 
C1018.094788,1026.720337 1020.851868,1000.535156 1024.599243,974.562500 
C1032.507324,919.751648 1045.410645,866.050842 1063.440308,813.645020 
C1099.028320,710.203369 1151.538818,616.207642 1220.892090,531.593811 
C1248.391113,498.043915 1278.105225,466.565521 1310.101440,437.343903 
C1365.182373,387.039276 1425.503784,343.986084 1491.147827,308.408875 
C1571.408936,264.909637 1656.300293,234.151932 1745.843262,216.755051 
C1776.157715,210.865417 1806.986084,207.465897 1837.672485,203.682846 
C1881.414062,198.290359 1925.437988,198.296158 1969.318237,200.439163 
C2033.612183,203.579147 2096.997559,213.528519 2159.230713,230.342758 
C2223.797607,247.787537 2285.684814,272.048462 2344.958008,303.002838 
C2350.271484,305.777740 2355.746826,308.340332 2360.715332,311.649719 
C2365.576904,314.887939 2368.992920,313.605438 2373.106201,310.252625 
C2398.662109,289.421631 2424.396729,268.810760 2450.050293,248.099670 
C2509.389160,200.193039 2568.721680,152.278656 2628.043945,104.351776 
C2659.907715,78.608925 2691.785645,52.883301 2723.547363,27.014853 
C2727.925293,23.449181 2732.170654,20.851406 2737.904785,22.809708 
C2738.066406,23.236322 2738.222656,23.522953 2738.276611,23.827742 
C2738.332275,24.141804 2738.362793,24.497183 2738.270508,24.792595 
C2738.073242,25.423285 2737.917236,26.127546 2737.523193,26.627232 
C2645.994385,142.761581 2554.446533,258.880676 2462.123291,375.985016 
C2465.511230,378.786224 2468.632568,381.566193 2471.954102,384.082672 
C2507.057373,410.679901 2539.882324,439.843750 2570.780273,471.220093 
C2622.688477,523.931763 2667.318115,582.228271 2705.132324,645.771973 
C2739.343750,703.261230 2766.417725,763.997070 2787.187744,827.542603 
C2798.991943,863.657410 2808.127930,900.482605 2815.473145,938.636353 
M2689.897949,71.094406 
C2689.897949,71.094406 2690.471924,70.306297 2691.613770,69.844536 
C2692.360840,68.873421 2693.108154,67.902298 2694.346924,66.442429 
C2694.657715,66.087502 2694.917969,65.698601 2695.800781,64.260895 
C2695.835449,63.477856 2695.870117,62.694820 2696.316895,61.928211 
C2696.316895,61.928211 2696.520264,61.455048 2696.520264,61.455048 
C2696.520264,61.455048 2696.079834,62.065144 2695.047852,62.171223 
C2694.550537,62.634968 2694.053223,63.098713 2692.634033,63.893063 
C2692.048340,64.228737 2691.606445,64.699219 2690.604492,65.576149 
C2690.063477,65.826683 2689.851807,66.244186 2689.030273,67.622299 
C2688.532715,68.252602 2688.034912,68.882912 2686.538818,69.720322 
C2686.084961,70.207535 2685.630859,70.694748 2683.963135,71.755951 
C2673.049805,80.510155 2662.110840,89.232971 2651.226562,98.023163 
C2426.749756,279.312744 2202.279541,460.610840 1977.806641,641.905579 
C1840.684204,752.651917 1703.557861,863.393250 1566.447266,974.154297 
C1563.770752,976.316467 1561.265747,978.691223 1557.001831,982.444763 
C1658.338745,981.614563 1757.268677,978.791565 1856.418579,977.707031 
C1856.186157,979.488953 1856.234009,979.842468 1856.090332,980.080078 
C1855.748779,980.644104 1855.367310,981.201477 1854.913940,981.677979 
C1703.818359,1140.568970 1552.715210,1299.452759 1401.614014,1458.338501 
C1401.155151,1458.821045 1400.710327,1459.318115 1400.278931,1459.825317 
C1399.847290,1460.332642 1399.434326,1460.856445 1399.026245,1461.383057 
C1398.822388,1461.645996 1398.588135,1461.909546 1398.477173,1462.212891 
C1398.381470,1462.475220 1398.387573,1462.805176 1398.445557,1463.085205 
C1398.511963,1463.406006 1398.685181,1463.704468 1398.812134,1464.012695 
C1399.114380,1464.114380 1399.416748,1464.305542 1399.718750,1464.304932 
C1493.361938,1464.083862 1587.005127,1463.848389 1680.648315,1463.631470 
C1681.630737,1463.629150 1682.619751,1463.833252 1683.591919,1464.015259 
C1683.842163,1464.062134 1684.096436,1464.357544 1684.245728,1464.601807 
C1684.414673,1464.878540 1684.467651,1465.226196 1684.702637,1465.946167 
C1677.865356,1474.647217 1670.880249,1483.536011 1663.895264,1492.425049 
C1540.382690,1649.605225 1416.856812,1806.774780 1293.366577,1963.972290 
C1260.029175,2006.409180 1226.799683,2048.930664 1192.330444,2092.075684 
C1190.080688,2095.028809 1187.830933,2097.981934 1185.581177,2100.935059 
C1186.147217,2101.436279 1186.713135,2101.937500 1187.279175,2102.438477 
C1190.327881,2099.742432 1193.376709,2097.046387 1197.635986,2093.794922 
C1257.666138,2046.163574 1317.708374,1998.547607 1377.724243,1950.898315 
C1619.353149,1759.058228 1860.972656,1567.206299 2102.598145,1375.361938 
C2171.224609,1320.874146 2239.863525,1266.402100 2308.473145,1211.893311 
C2310.852783,1210.002686 2312.978271,1207.792236 2315.221924,1205.730957 
C2220.031738,1204.031250 2125.783936,1204.031738 2031.536011,1204.007568 
C2031.316040,1204.007446 2031.046143,1203.678467 2030.889160,1203.443481 
C2030.707886,1203.172119 2030.626221,1202.834229 2030.308594,1202.049072 
C2177.457764,1046.540283 2324.754883,890.875366 2472.051758,735.210449 
C2471.689697,734.560669 2471.327881,733.910828 2470.965820,733.261047 
C2370.879150,733.261047 2270.792480,733.261047 2168.902344,733.261047 
C2171.763428,729.235413 2173.494141,726.575134 2175.447021,724.089294 
C2187.384521,708.891663 2199.381104,693.740417 2211.342529,678.561462 
C2351.158936,501.136566 2490.987549,323.721008 2630.770752,146.269638 
C2649.930664,121.946335 2668.860596,97.441643 2688.500977,72.766823 
C2688.890381,72.492508 2689.086914,72.117218 2689.897949,71.094406 
M1104.522949,1218.010010 
C1106.538574,1230.832520 1108.238037,1243.714111 1110.620728,1256.468018 
C1127.018066,1344.240112 1156.211182,1427.465454 1199.436157,1505.696289 
C1255.999146,1608.067017 1330.834839,1694.644897 1423.797363,1765.577393 
C1426.345093,1767.521606 1429.104858,1769.187988 1432.317749,1771.356567 
C1510.111328,1672.355713 1587.483765,1574.141602 1666.130493,1473.751953 
C1631.593628,1473.751953 1599.755005,1473.705078 1567.916748,1473.764893 
C1535.588867,1473.825562 1503.261475,1474.031738 1470.933594,1474.100220 
C1439.205688,1474.167480 1407.471313,1474.581177 1373.292236,1474.167603 
C1405.635498,1440.133911 1436.100464,1408.066772 1466.576782,1376.010498 
C1497.339600,1343.652832 1528.122437,1311.314209 1558.880615,1278.952026 
C1589.408813,1246.831909 1619.899536,1214.676025 1650.439209,1182.566772 
C1681.210205,1150.214355 1712.119385,1117.992676 1742.787109,1085.542725 
C1773.048706,1053.522583 1803.734131,1021.890930 1833.705811,989.599670 
C1833.353394,988.980591 1833.000977,988.361511 1832.648438,987.742432 
C1731.978149,989.445129 1631.307861,991.147888 1530.637573,992.850647 
C1785.475342,784.640259 2040.958618,578.485352 2296.785400,371.720490 
C2294.283203,370.148590 2293.217773,369.320648 2292.027344,368.756104 
C2280.593506,363.333374 2269.235107,357.737488 2257.674316,352.598145 
C2161.889648,310.017395 2061.489502,286.957855 1956.862671,282.515350 
C1912.875732,280.647644 1868.960083,282.428192 1825.176025,287.666016 
C1771.433228,294.095215 1718.746338,305.293427 1667.383545,322.255768 
C1516.817505,371.979523 1390.493042,457.727264 1288.682739,579.231384 
C1216.940796,664.850891 1165.042358,761.420166 1132.603882,868.308411 
C1112.789429,933.599060 1101.278442,1000.421936 1098.314697,1068.609253 
C1096.169556,1117.961182 1097.893311,1167.207031 1104.522949,1218.010010 
M2330.284912,543.337036 
C2314.611328,563.231323 2298.940430,583.127686 2283.263428,603.019409 
C2267.586182,622.911743 2251.834961,642.746704 2236.240967,662.704163 
C2220.815186,682.446411 2204.813721,701.762512 2189.966309,721.997498 
C2191.409424,723.010376 2191.658691,723.338440 2191.908203,723.338745 
C2291.229980,723.467407 2390.551514,723.572632 2489.873291,723.695557 
C2490.857178,723.696777 2491.846191,723.896057 2492.821045,724.069275 
C2493.090332,724.117126 2493.388184,724.358215 2493.544434,724.595398 
C2493.719727,724.861206 2493.749512,725.223022 2494.021973,726.160217 
C2347.107178,881.417358 2199.968262,1036.911621 2052.829346,1192.405762 
C2053.117920,1193.100952 2053.406738,1193.796021 2053.695557,1194.491089 
C2063.213623,1194.491089 2072.731445,1194.491089 2082.249512,1194.491089 
C2091.915771,1194.491089 2101.582031,1194.491089 2111.248291,1194.491089 
C2120.914551,1194.491089 2130.580811,1194.491089 2140.247070,1194.491089 
C2149.913330,1194.491089 2159.579834,1194.491089 2169.246094,1194.491089 
C2178.912354,1194.491089 2188.578613,1194.491089 2198.244873,1194.491089 
C2207.911133,1194.491089 2217.577637,1194.491089 2227.243896,1194.491089 
C2236.910156,1194.491089 2246.576416,1194.491089 2256.242676,1194.491089 
C2265.908936,1194.491089 2275.575439,1194.491089 2285.241699,1194.491089 
C2294.907959,1194.491089 2304.574463,1194.455200 2314.240479,1194.501343 
C2323.613281,1194.546143 2332.985352,1194.675171 2342.357910,1194.767090 
C2342.527100,1195.502563 2342.696289,1196.238037 2342.865723,1196.973511 
C2074.411377,1410.129761 1805.956909,1623.286011 1537.197266,1836.684814 
C1836.113647,2006.062378 2325.070312,1974.388672 2601.792725,1576.973511 
C2865.673828,1198.000610 2759.606445,692.391052 2410.255859,441.880341 
C2383.913574,475.299927 2357.541992,508.756622 2330.284912,543.337036 
M2693.215332,783.736328 
C2693.839355,785.277222 2694.451416,786.823181 2695.089111,788.358398 
C2728.423828,868.624817 2748.362305,952.168457 2755.535645,1038.708740 
C2759.616699,1087.943237 2759.213623,1137.198730 2754.569580,1186.447998 
C2749.709473,1237.989746 2740.459229,1288.666382 2726.042969,1338.358521 
C2683.686768,1484.356812 2607.749756,1610.214111 2497.091309,1714.403809 
C2351.488037,1851.495483 2178.239502,1926.753540 1978.883057,1941.559082 
C1924.254761,1945.616089 1869.695679,1943.441284 1815.316895,1936.412476 
C1734.515137,1925.968262 1656.899780,1904.314819 1582.595093,1870.936768 
C1564.115234,1862.635376 1545.993408,1853.537354 1527.196777,1844.562012 
C1510.009033,1858.225708 1492.655396,1872.021362 1474.961670,1886.087280 
C1709.828979,2026.122559 2045.627686,2058.927979 2339.858643,1904.040405 
C2641.702637,1745.145386 2828.884277,1431.774536 2821.295654,1087.788696 
C2813.887207,751.976929 2625.722900,504.368103 2454.966797,385.067993 
C2444.261230,398.628448 2433.528320,412.204254 2422.823486,425.802216 
C2420.992188,428.128235 2419.281006,430.548798 2417.006104,433.609741 
C2539.972168,525.486877 2632.411377,641.219055 2693.215332,783.736328 
M1189.937134,706.872925 
C1300.596313,510.536194 1462.337036,375.586334 1677.900391,309.347534 
C1893.687378,243.039948 2103.525635,264.468079 2306.110596,364.302399 
C2323.329834,350.372864 2340.549072,336.443329 2358.108154,322.238739 
C1982.419434,107.182541 1433.050415,190.679413 1157.224365,638.786621 
C898.346008,1059.360840 1037.637817,1577.348633 1387.612671,1828.307861 
C1400.279663,1812.170532 1412.963135,1796.012207 1425.888794,1779.545532 
C1316.968506,1697.612427 1232.181274,1596.753906 1172.614014,1475.152100 
C1113.065308,1353.587769 1085.066406,1224.898560 1087.971680,1089.610718 
C1090.876831,954.334656 1124.651245,827.139221 1189.937134,706.872925 
z"/>
<path fill="#E5281A" opacity="1.000000" stroke="none" 
d="
M1104.428101,1217.122314 
C1097.893311,1167.207031 1096.169556,1117.961182 1098.314697,1068.609253 
C1101.278442,1000.421936 1112.789429,933.599060 1132.603882,868.308411 
C1165.042358,761.420166 1216.940796,664.850891 1288.682739,579.231384 
C1390.493042,457.727264 1516.817505,371.979523 1667.383545,322.255768 
C1718.746338,305.293427 1771.433228,294.095215 1825.176025,287.666016 
C1868.960083,282.428192 1912.875732,280.647644 1956.862671,282.515350 
C2061.489502,286.957855 2161.889648,310.017395 2257.674316,352.598145 
C2269.235107,357.737488 2280.593506,363.333374 2292.027344,368.756104 
C2293.217773,369.320648 2294.283203,370.148590 2296.785400,371.720490 
C2040.958618,578.485352 1785.475342,784.640259 1530.637573,992.850647 
C1631.307861,991.147888 1731.978149,989.445129 1832.648438,987.742432 
C1833.000977,988.361511 1833.353394,988.980591 1833.705811,989.599670 
C1803.734131,1021.890930 1773.048706,1053.522583 1742.787109,1085.542725 
C1712.119385,1117.992676 1681.210205,1150.214355 1650.439209,1182.566772 
C1619.899536,1214.676025 1589.408813,1246.831909 1558.880615,1278.952026 
C1528.122437,1311.314209 1497.339600,1343.652832 1466.576782,1376.010498 
C1436.100464,1408.066772 1405.635498,1440.133911 1373.292236,1474.167603 
C1407.471313,1474.581177 1439.205688,1474.167480 1470.933594,1474.100220 
C1503.261475,1474.031738 1535.588867,1473.825562 1567.916748,1473.764893 
C1599.755005,1473.705078 1631.593628,1473.751953 1666.130493,1473.751953 
C1587.483765,1574.141602 1510.111328,1672.355713 1432.317749,1771.356567 
C1429.104858,1769.187988 1426.345093,1767.521606 1423.797363,1765.577393 
C1330.834839,1694.644897 1255.999146,1608.067017 1199.436157,1505.696289 
C1156.211182,1427.465454 1127.018066,1344.240112 1110.620728,1256.468018 
C1108.238037,1243.714111 1106.538574,1230.832520 1104.428101,1217.122314 
z"/>
<path fill="#E5281A" opacity="1.000000" stroke="none" 
d="
M2330.727539,542.775146 
C2357.541992,508.756622 2383.913574,475.299927 2410.255859,441.880341 
C2759.606445,692.391052 2865.673828,1198.000610 2601.792725,1576.973511 
C2325.070312,1974.388672 1836.113647,2006.062378 1537.197266,1836.684814 
C1805.956909,1623.286011 2074.411377,1410.129761 2342.865723,1196.973511 
C2342.696289,1196.238037 2342.527100,1195.502563 2342.357910,1194.767090 
C2332.985352,1194.675171 2323.613281,1194.546143 2314.240479,1194.501343 
C2304.574463,1194.455200 2294.907959,1194.491089 2285.241699,1194.491089 
C2275.575439,1194.491089 2265.908936,1194.491089 2256.242676,1194.491089 
C2246.576416,1194.491089 2236.910156,1194.491089 2227.243896,1194.491089 
C2217.577637,1194.491089 2207.911133,1194.491089 2198.244873,1194.491089 
C2188.578613,1194.491089 2178.912354,1194.491089 2169.246094,1194.491089 
C2159.579834,1194.491089 2149.913330,1194.491089 2140.247070,1194.491089 
C2130.580811,1194.491089 2120.914551,1194.491089 2111.248291,1194.491089 
C2101.582031,1194.491089 2091.915771,1194.491089 2082.249512,1194.491089 
C2072.731445,1194.491089 2063.213623,1194.491089 2053.695557,1194.491089 
C2053.406738,1193.796021 2053.117920,1193.100952 2052.829346,1192.405762 
C2199.968262,1036.911621 2347.107178,881.417358 2494.021973,726.160217 
C2493.749512,725.223022 2493.719727,724.861206 2493.544434,724.595398 
C2493.388184,724.358215 2493.090332,724.117126 2492.821045,724.069275 
C2491.846191,723.896057 2490.857178,723.696777 2489.873291,723.695557 
C2390.551514,723.572632 2291.229980,723.467407 2191.908203,723.338745 
C2191.658691,723.338440 2191.409424,723.010376 2189.966309,721.997498 
C2204.813721,701.762512 2220.815186,682.446411 2236.240967,662.704163 
C2251.834961,642.746704 2267.586182,622.911743 2283.263428,603.019409 
C2298.940430,583.127686 2314.611328,563.231323 2330.727539,542.775146 
z"/>
<path fill="#FED500" opacity="1.000000" stroke="none" 
d="
M2687.896973,73.020966 
C2668.860596,97.441643 2649.930664,121.946335 2630.770752,146.269638 
C2490.987549,323.721008 2351.158936,501.136566 2211.342529,678.561462 
C2199.381104,693.740417 2187.384521,708.891663 2175.447021,724.089294 
C2173.494141,726.575134 2171.763428,729.235413 2168.902344,733.261047 
C2270.792480,733.261047 2370.879150,733.261047 2470.965820,733.261047 
C2471.327881,733.910828 2471.689697,734.560669 2472.051758,735.210449 
C2324.754883,890.875366 2177.457764,1046.540283 2030.308594,1202.049072 
C2030.626221,1202.834229 2030.707886,1203.172119 2030.889160,1203.443481 
C2031.046143,1203.678467 2031.316040,1204.007446 2031.536011,1204.007568 
C2125.783936,1204.031738 2220.031738,1204.031250 2315.221924,1205.730957 
C2312.978271,1207.792236 2310.852783,1210.002686 2308.473145,1211.893311 
C2239.863525,1266.402100 2171.224609,1320.874146 2102.598145,1375.361938 
C1860.972656,1567.206299 1619.353149,1759.058228 1377.724243,1950.898315 
C1317.708374,1998.547607 1257.666138,2046.163574 1196.458008,2093.677246 
C1194.693481,2092.844238 1194.107056,2092.128662 1193.520630,2091.413330 
C1226.799683,2048.930664 1260.029175,2006.409180 1293.366577,1963.972290 
C1416.856812,1806.774780 1540.382690,1649.605225 1663.895264,1492.425049 
C1670.880249,1483.536011 1677.865356,1474.647217 1684.702637,1465.946167 
C1684.467651,1465.226196 1684.414673,1464.878540 1684.245728,1464.601807 
C1684.096436,1464.357544 1683.842163,1464.062134 1683.591919,1464.015259 
C1682.619751,1463.833252 1681.630737,1463.629150 1680.648315,1463.631470 
C1587.005127,1463.848389 1493.361938,1464.083862 1399.718750,1464.304932 
C1399.416748,1464.305542 1399.114380,1464.114380 1398.812134,1464.012695 
C1398.685181,1463.704468 1398.511963,1463.406006 1398.445557,1463.085205 
C1398.387573,1462.805176 1398.381470,1462.475220 1398.477173,1462.212891 
C1398.588135,1461.909546 1398.822388,1461.645996 1399.026245,1461.383057 
C1399.434326,1460.856445 1399.847290,1460.332642 1400.278931,1459.825317 
C1400.710327,1459.318115 1401.155151,1458.821045 1401.614014,1458.338501 
C1552.715210,1299.452759 1703.818359,1140.568970 1854.913940,981.677979 
C1855.367310,981.201477 1855.748779,980.644104 1856.090332,980.080078 
C1856.234009,979.842468 1856.186157,979.488953 1856.418579,977.707031 
C1757.268677,978.791565 1658.338745,981.614563 1557.001831,982.444763 
C1561.265747,978.691223 1563.770752,976.316467 1566.447266,974.154297 
C1703.557861,863.393250 1840.684204,752.651917 1977.806641,641.905579 
C2202.279541,460.610840 2426.749756,279.312744 2651.226562,98.023163 
C2662.110840,89.232971 2673.049805,80.510155 2685.237793,71.946838 
C2686.973877,72.432144 2687.435303,72.726547 2687.896973,73.020966 
z"/>
<path fill="#FDD400" opacity="1.000000" stroke="none" 
d="
M2692.874512,783.055115 
C2632.411377,641.219055 2539.972168,525.486877 2417.006104,433.609741 
C2419.281006,430.548798 2420.992188,428.128235 2422.823486,425.802216 
C2433.528320,412.204254 2444.261230,398.628448 2454.966797,385.067993 
C2625.722900,504.368103 2813.887207,751.976929 2821.295654,1087.788696 
C2828.884277,1431.774536 2641.702637,1745.145386 2339.858643,1904.040405 
C2045.627686,2058.927979 1709.828979,2026.122559 1474.961670,1886.087280 
C1492.655396,1872.021362 1510.009033,1858.225708 1527.196777,1844.562012 
C1545.993408,1853.537354 1564.115234,1862.635376 1582.595093,1870.936768 
C1656.899780,1904.314819 1734.515137,1925.968262 1815.316895,1936.412476 
C1869.695679,1943.441284 1924.254761,1945.616089 1978.883057,1941.559082 
C2178.239502,1926.753540 2351.488037,1851.495483 2497.091309,1714.403809 
C2607.749756,1610.214111 2683.686768,1484.356812 2726.042969,1338.358521 
C2740.459229,1288.666382 2749.709473,1237.989746 2754.569580,1186.447998 
C2759.213623,1137.198730 2759.616699,1087.943237 2755.535645,1038.708740 
C2748.362305,952.168457 2728.423828,868.624817 2695.089111,788.358398 
C2694.451416,786.823181 2693.839355,785.277222 2692.874512,783.055115 
z"/>
<path fill="#FDD400" opacity="1.000000" stroke="none" 
d="
M1189.601807,707.533020 
C1124.651245,827.139221 1090.876831,954.334656 1087.971680,1089.610718 
C1085.066406,1224.898560 1113.065308,1353.587769 1172.614014,1475.152100 
C1232.181274,1596.753906 1316.968506,1697.612427 1425.888794,1779.545532 
C1412.963135,1796.012207 1400.279663,1812.170532 1387.612671,1828.307861 
C1037.637817,1577.348633 898.346008,1059.360840 1157.224365,638.786621 
C1433.050415,190.679413 1982.419434,107.182541 2358.108154,322.238739 
C2340.549072,336.443329 2323.329834,350.372864 2306.110596,364.302399 
C2103.525635,264.468079 1893.687378,243.039948 1677.900391,309.347534 
C1462.337036,375.586334 1300.596313,510.536194 1189.601807,707.533020 
z"/>
<path fill="#C2A000" opacity="1.000000" stroke="none" 
d="
M1192.925537,2091.744629 
C1194.107056,2092.128662 1194.693481,2092.844238 1195.852783,2093.954834 
C1193.376709,2097.046387 1190.327881,2099.742432 1187.279175,2102.438477 
C1186.713135,2101.937500 1186.147217,2101.436279 1185.581177,2100.935059 
C1187.830933,2097.981934 1190.080688,2095.028809 1192.925537,2091.744629 
z"/>
<path fill="#866B01" opacity="1.000000" stroke="none" 
d="
M2693.855469,66.931122 
C2693.108154,67.902298 2692.360840,68.873421 2690.939453,69.202789 
C2690.166504,67.983582 2690.067871,67.406128 2689.969482,66.828667 
C2689.851807,66.244186 2690.063477,65.826683 2691.574219,65.876144 
C2692.981201,66.427780 2693.418213,66.679420 2693.855469,66.931122 
z"/>
<path fill="#866B01" opacity="1.000000" stroke="none" 
d="
M2696.079834,62.065144 
C2696.079834,62.065144 2696.520264,61.455048 2696.520264,61.455048 
C2696.520264,61.455048 2696.316895,61.928211 2696.154785,61.958729 
C2695.992432,61.989246 2696.079834,62.065144 2696.079834,62.065144 
z"/>
<path fill="#866B01" opacity="1.000000" stroke="none" 
d="
M2693.555908,63.562458 
C2694.053223,63.098713 2694.550537,62.634968 2695.563965,62.118183 
C2696.079834,62.065144 2695.992432,61.989246 2695.948730,61.950516 
C2695.870117,62.694820 2695.835449,63.477856 2695.079590,64.332321 
C2694.091064,64.123314 2693.823486,63.842888 2693.555908,63.562458 
z"/>
<path fill="#866B01" opacity="1.000000" stroke="none" 
d="
M2694.742676,64.839737 
C2694.917969,65.698601 2694.657715,66.087502 2694.101074,66.686752 
C2693.418213,66.679420 2692.981201,66.427780 2691.926025,65.740326 
C2691.606445,64.699219 2692.048340,64.228737 2693.094971,63.727760 
C2693.823486,63.842888 2694.091064,64.123314 2694.742676,64.839737 
z"/>
<path fill="#FED500" opacity="1.000000" stroke="none" 
d="
M2689.500000,67.225479 
C2690.067871,67.406128 2690.166504,67.983582 2690.368408,69.433670 
C2690.471924,70.306297 2689.897949,71.094406 2689.116699,70.827881 
C2688.069092,70.211952 2687.802979,69.862556 2687.537109,69.513191 
C2688.034912,68.882912 2688.532715,68.252602 2689.500000,67.225479 
z"/>
<path fill="#FED500" opacity="1.000000" stroke="none" 
d="
M2688.712891,71.101151 
C2689.086914,72.117218 2688.890381,72.492508 2688.198975,72.893890 
C2687.435303,72.726547 2686.973877,72.432144 2685.844727,71.659851 
C2685.630859,70.694748 2686.084961,70.207535 2687.038086,69.616745 
C2687.802979,69.862556 2688.069092,70.211952 2688.712891,71.101151 
z"/>
</svg>
  `;
}

function handleMouseEnter(e: MouseEvent) {
  const widget = e.target;
  if (!widget) return;
  (widget as HTMLDivElement).style.background = "rgba(0, 124, 191, 0.10)";
}

function handleMouseLeave(e: MouseEvent) {
  const widget = e.target;
  if (!widget) return;
  (widget as HTMLDivElement).style.background = "rgba(255, 255, 255, 0.70)";
}

function applyStretchStyleProperties(
  widget: HTMLDivElement,
  xDelta: number,
  isOnLeftSide: boolean
) {
  widget.style.setProperty("width", `${20 + xDelta}px`, "important");
  widget.style.setProperty("justify-content", isOnLeftSide ? "end" : "start");
  widget.style.setProperty(
    isOnLeftSide ? "padding-right" : "padding-left",
    "6px"
  );
  widget.style.setProperty("transition", "none");
}

function removeAddedProperties(widget: HTMLDivElement) {
  widget.style.removeProperty("width");
  widget.style.removeProperty("justify-content");
  widget.style.removeProperty("padding-left");
  widget.style.removeProperty("padding-right");
  widget.style.removeProperty("transition");
}

function expandWalletWidgetOnClick(widget: HTMLDivElement, theme?: string) {
  showExpandedWalletWidget(widget as HTMLDivElement, theme);
  const parsedX =
    parseFloat((widget as HTMLDivElement).getAttribute("data-x") || "0") || 0;
  const parsedY =
    parseFloat((widget as HTMLDivElement).getAttribute("data-y") || "0") || 0;
  const { x, y } = stickToNearestSideEdge(parsedX, parsedY, widget);
  // Apply the adjusted positions
  widget.style.transform = `translate(${x}px, ${y}px)`;
  widget.setAttribute("data-x", String(x));
  widget.setAttribute("data-y", String(y));
  removeAddedProperties(widget);
}

function setupWalletWidget({
  onDragStart,
  onDragEnd,
  isDragging,
  setInteractable,
  handleWidgetClick,
  windowDraggableResizeListener,
  windowDraggableScrollListener,
  hyperLinkSessionId,
  theme,
  onSwipeLeft,
}: {
  onDragStart: () => void;
  onDragEnd: () => void;
  isDragging: () => boolean;
  setInteractable: (interactable: Interact.Interactable) => void;
  handleWidgetClick: () => void;
  windowDraggableResizeListener: () => void;
  windowDraggableScrollListener: () => void;
  hyperLinkSessionId: string;
  theme?: string;
  onSwipeLeft?: () => void;
}): Element | undefined {
  if (typeof window === "undefined" || typeof document === "undefined") {
    return;
  }
  const widgetClassNames = setupWalletWidgetClassNames(
    theme,
    false,
    true,
    true
  );
  const widgetIconSvg = setupWalletWidgetIconSvg();
  const vh = bottom();
  const initialYOffset = isMobileDimension()
    ? WIDGET_DIMENSION.HEIGHT.MOBILE + EDGE_OFFSET + 20 // init mobile a little higher
    : WIDGET_DIMENSION.HEIGHT.DESKTOP + EDGE_OFFSET;
  const initialWidgetYPosition = vh - initialYOffset;
  const widgetElementId = widgetId(hyperLinkSessionId);
  console.log("widgetClassNames", widgetClassNames);
  const htmlString = `
  <div id="${widgetElementId}" style="transform: translate(20px, calc(100svh - ${initialYOffset}px)); pointer-events: auto; touch-action: none; -ms-touch-action: none; animation: enter 0.6s ease-out 1; border: 1px solid rgba(11, 45, 69, 0.04); background: rgba(255, 255, 255, 0.70); box-shadow: 0px 4px 20px 0px rgba(0, 0, 0, 0.10); color: #17303E; display: flex; justify-content: center; align-items: center; flex-direction: column; transition: background ease-out 0.15s, color ease-out 0.15s; width: 101px; height: 72px; border-radius: 12px; text-align: center; position: fixed; cursor: grab; z-index: 2147483645; top: 0px; left: 0px; backdrop-filter: blur(5px); -webkit-backdrop-filter: blur(5px); font-family: var(--font-inter), sans-serif; font-size: 12px; font-weight: 600; line-height: 16px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;" data-x="20" data-y="${initialWidgetYPosition}" data-x-prev="20" data-vh="${vh}">
<div class="tiplinkWidget_pulse"></div>
<div id="tiplink-widget-notif" style="user-selection: none; height: 0px; width: 0px; overflow: hidden;">1</div>
<div id="tiplink-widget-logo" style="width: auto; height: 32px; margin-bottom: 4px;">
${widgetIconSvg}
</div>
<p id="tiplink-widget-text">View Wallet</p>
<div id="tiplink-widget-chevron" style="display: none;">
<svg width="8" height="12" viewBox="0 0 8 12" fill="none" xmlns="http://www.w3.org/2000/svg">
 <path fill-rule="evenodd" clip-rule="evenodd" d="M0.910746 0.410826C1.23618 0.0853888 1.76382 0.0853888 2.08926 0.410826L7.08926 5.41083C7.41469 5.73626 7.41469 6.2639 7.08926 6.58934L2.08926 11.5893C1.76382 11.9148 1.23618 11.9148 0.910746 11.5893C0.585309 11.2639 0.585309 10.7363 0.910746 10.4108L5.32149 6.00008L0.910746 1.58934C0.585309 1.2639 0.585309 0.736263 0.910746 0.410826Z" fill="currentColor" />
</svg>          
</div>
</div>
 `;
  const buttonDiv = htmlToElement(htmlString);
  buttonDiv.addEventListener("click", (e) => {
    if (isDragging()) {
      return;
    }
    const widget = document.getElementById(widgetElementId) as HTMLDivElement;
    const isCollapsed = (widget as HTMLDivElement).classList.contains(
      "hyperLinkWidget_collapsed"
    );
    if (isCollapsed) {
      expandWalletWidgetOnClick(widget, theme);
    } else {
      handleWidgetClick();
    }
  });
  buttonDiv.addEventListener("mousedown", setupTouchIntercept);
  buttonDiv.addEventListener("touchstart", setupTouchIntercept);
  buttonDiv.addEventListener("mouseup", teardownTouchIntercept);
  buttonDiv.addEventListener("touchend", teardownTouchIntercept);
  buttonDiv.addEventListener("touchforcechange", (event: Event) => {
    event.preventDefault();
  });
  window.document.body.appendChild(buttonDiv);
  const interactable = interact(`#${widgetElementId}`).draggable({
    listeners: {
      start() {
        setupTouchIntercept();
      },
      end() {
        teardownTouchIntercept();
      },
    },
    cursorChecker: () => "pointer",
    modifiers: [
      interact.modifiers.snap({
        targets: [
          function (x, y) {
            const widget = document.getElementById(widgetElementId);
            const { x: stickyX, y: stickyY } = stickToNearestSideEdge(
              x,
              y - window.scrollY,
              widget as HTMLDivElement
            );
            return {
              x: stickyX,
              y: stickyY + window.scrollY,
            };
          },
        ],
        range: Infinity,
        relativePoints: [{ x: 0, y: 0 }],
        endOnly: true,
      }),
    ],
    inertia: true,
    onstart: (event: { target: HTMLDivElement }) => {
      const target = event.target;
      const originX = parseFloat(target.getAttribute("data-x") || "0") || 0;
      target.setAttribute("data-x-prev", String(originX));
      setupTouchIntercept();
      onDragStart();
    },
    onmove: function (event: { target: any; dx: any; dy: any }) {
      onDragStart();
      const target = event.target;
      const isCollapsed = target.classList.contains(
        "hyperLinkWidget_collapsed"
      );
      const x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
      const y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;
      const vw = right();
      const widgetWidth = getStableWidgetWidth(isCollapsed);
      const isOutOfBoundX =
        x <= (widgetWidth / 2) * -1 || x >= vw - EDGE_OFFSET - EXPAND_THRESHOLD;
      const isOnLeftSide = x < (vw - EDGE_OFFSET) / 2;
      const xDelta = isOnLeftSide ? x : vw - x - EDGE_OFFSET;
      const shouldExpand = isMobileDimension()
        ? xDelta >=
          WIDGET_DIMENSION.WIDTH.MOBILE - EDGE_OFFSET - EXPAND_THRESHOLD
        : xDelta >=
          WIDGET_DIMENSION.WIDTH.DESKTOP - EDGE_OFFSET - EXPAND_THRESHOLD;
      const shouldCollapse = !isCollapsed && isOutOfBoundX;
      const isStickiedToLeftEdge =
        isCollapsed && isOnLeftSide && (xDelta > 0 || xDelta < 0);
      if (isCollapsed) {
        if (xDelta > 0) {
          applyStretchStyleProperties(target, xDelta, isOnLeftSide);
        } else {
          removeAddedProperties(target);
        }
        if (shouldExpand) {
          showExpandedWalletWidget(target, theme);
          removeAddedProperties(target);
        }
      }
      if (shouldCollapse) {
        showCollapsedWalletWidget(target, theme, isOnLeftSide);
      }
      target.style.transform = `translate(${
        isStickiedToLeftEdge ? 0 : x
      }px, ${y}px)`;
      target.setAttribute("data-x", x);
      target.setAttribute("data-y", y);
    },
    onend: (event: {
      target: any;
      duration: number;
      x0: number;
      y0: number;
      swipe: {
        angle: number;
        down: boolean;
        left: boolean;
        right: boolean;
        speed: number;
        up: boolean;
        velocity: {
          x: number;
          y: number;
        };
      } | null;
    }) => {
      const target = event.target;
      const { parsedX, parsedY } = getWidgetAttributes(target);
      const { x, y } = stickToNearestSideEdge(parsedX, parsedY, target);
      updateWidgetPosStyleAndAttributes(target, x, y);
      onDragEnd();
      teardownTouchIntercept();
    },
  });
  setInteractable(interactable);
  // This is used later to position the element at load time
  window.addEventListener("resize", windowDraggableResizeListener);
  window.addEventListener("scroll", windowDraggableScrollListener);
  return buttonDiv;
}

function tearDownWalletWidget(
  windowResizeListener: () => void,
  windowScrollListener: () => void,
  interactable?: Interact.Interactable,
  target?: Element
) {
  window.removeEventListener("resize", windowResizeListener);
  window.removeEventListener("scroll", windowScrollListener);
  if (target) {
    target.remove();
  }
  interactable?.unset();
}

export class HyperLinkEmbed extends EventEmitter<HyperLinkEmbedEvents> {
  publicKeyString: string | undefined;

  private hyperLinkAlertContainer: HTMLDivElement | undefined;
  private hyperLinkToastContainer: HTMLDivElement | undefined;

  private hyperLinkIframe: HTMLIFrameElement | undefined;
  private hyperLinkDraggableWidget: Element | undefined;
  private draggableWidgetWindowResizeListener: () => void;
  private draggableWidgetWindowScrollListener: () => void;
  private readonly buildEnv: HYPERLINK_BUILD_ENV_TYPE;

  private windowCommunicator: WindowCommunicator;
  private styleLink: HTMLLinkElement | undefined;
  private title: string;
  private readonly clientId: string;
  private readonly isDisallowed: () => boolean;
  private readonly forceIframe: boolean;
  private _isDragging = false;
  private _interactable: Interact.Interactable | undefined;
  theme: string | undefined;
  private readonly hyperLinkSessionId: string;
  private readonly dAppSessionId: string;
  private _walletHandshake:
    | {
        post: PostFn;
        close: CloseFn;
      }
    | undefined;
  private _walletAdapterNetwork:
    | WalletAdapterNetwork.Mainnet
    | WalletAdapterNetwork.Devnet;

  constructor(
    title: string,
    buildEnv: HYPERLINK_BUILD_ENV_TYPE,
    clientId: string,
    forceIframe: boolean,
    dAppSessionId: string,
    walletAdapterNetwork:
      | WalletAdapterNetwork.Mainnet
      | WalletAdapterNetwork.Devnet,
    isDisallowed: () => boolean
  ) {
    super();
    this.title = title;
    this.hyperLinkAlertContainer = undefined;
    this.hyperLinkToastContainer = undefined;
    const prevPublicKey = localStorage.getItem("hyperLink_pk_connected");
    this.publicKeyString = prevPublicKey || undefined;
    this.buildEnv = buildEnv;
    this.clientId = clientId;
    this.windowCommunicator = new WindowCommunicator(
      this.buildEnv,
      (onClick: () => void, onClose: () => void, popupType: PopupType) => {
        this._createPopupBlockAlert(onClick, onClose, popupType);
      }
    );
    const cssLink = new URL("/css/widget.css", getHyperLinkUrl(this.buildEnv));
    this.styleLink = htmlToElement<HTMLLinkElement>(
      `<link href="${cssLink.toString()}" rel="stylesheet" type="text/css">`
    );
    this.forceIframe = forceIframe;
    this.isDisallowed = isDisallowed;
    this.dAppSessionId = dAppSessionId;
    this.hyperLinkSessionId = uuid();
    this._walletAdapterNetwork = walletAdapterNetwork;
    this.draggableWidgetWindowResizeListener = () => {
      if (this._isDragging || !this.hyperLinkDraggableWidget) return;
      const target = this.hyperLinkDraggableWidget as HTMLDivElement;
      const { parsedX, parsedY, parsedVh } = getWidgetAttributes(target);
      let finalX = 0,
        finalY = 0;
      // translate corner position if window resize
      if (isBottomCornerPosition(parsedY, parsedVh, target)) {
        const { x, y } = stickToNearestCorner(
          parsedX,
          parsedY,
          target as HTMLDivElement
        );
        finalX = x;
        finalY = y;
      } else {
        // stick to edge on horizontal window resize
        const { x, y } = stickToNearestSideEdge(
          parsedX,
          parsedY,
          target as HTMLDivElement
        );
        finalX = x;
        finalY = y;
      }
      updateWidgetPosStyleAndAttributes(target, finalX, finalY);
    };
    this.draggableWidgetWindowScrollListener = () => {
      if (this._isDragging || !this.hyperLinkDraggableWidget) return;
      const target = this.hyperLinkDraggableWidget as HTMLDivElement;
      const { parsedX, parsedY, parsedVh } = getWidgetAttributes(target);
      if (!isBottomCornerPosition(parsedY, parsedVh, target)) return;
      const { x, y } = stickToNearestCorner(
        parsedX,
        parsedY,
        target as HTMLDivElement
      );
      // Update transform and attributes
      updateWidgetPosStyleAndAttributes(target, x, y);
    };
    checkAndAttachHyperLinkInstance(this);
  }

  get publicKey(): PublicKey | null {
    if (this.publicKeyString) {
      return new PublicKey(this.publicKeyString);
    }
    return null;
  }

  get isLoggedIn(): boolean {
    return !!this.publicKeyString;
  }

  private extendSession = () => {
    if (!this.hyperLinkIframe?.contentWindow) {
      return;
    }
    this.windowCommunicator.singlePostToWindow(
      this.hyperLinkIframe.contentWindow,
      {
        message: "extend_session",
      }
    );
  };

  private hideIframe() {
    if (this.hyperLinkIframe?.style?.display) {
      this.hyperLinkIframe.style.display = "none";
    }
  }

  private showWidgetNotificationUi() {
    if (!document) return;
    const notif = document.getElementById("tiplink-widget-notif");
    notif?.classList.add("tiplinkWidget_notif_show");
  }

  private hideWidgetNotificationUi() {
    if (!document) return;
    const notif = document.getElementById("tiplink-widget-notif");
    notif?.classList.remove("tiplinkWidget_notif_show");
  }

  private getGreenCheckmarkLogoUrl(): string {
    return new URL(
      "adapter-green-checkmark.svg",
      getHyperLinkUrl(this.buildEnv)
    ).toString();
  }

  private getHyperLinkLogoUrl(): string {
    const logoUrl = new URL(
      "adapter-tiplink-logo.svg",
      getHyperLinkUrl(this.buildEnv)
    );
    return logoUrl.toString();
  }

  private getWhiteHyperLinkLogoUrl(): string {
    const logoUrl = new URL(
      "brand-assets/logo/logomark/svg/tiplink_logomark_white.svg",
      getHyperLinkUrl(this.buildEnv)
    );
    return logoUrl.toString();
  }

  private getDarkHyperLinkLogoUrl(): string {
    const logoUrl = new URL(
      "tiplink/tiplink-logo-dark.svg",
      getHyperLinkUrl(this.buildEnv)
    );
    return logoUrl.toString();
  }

  private getGoogleLogoUrl(): string {
    const logoUrl = new URL(
      "adapter-google-logo.svg",
      getHyperLinkUrl(this.buildEnv)
    );
    return logoUrl.toString();
  }

  private getBackgroundImageUrl(): string {
    const logoUrl = new URL(
      "adapter-modal-background.png",
      getHyperLinkUrl(this.buildEnv)
    );
    return logoUrl.toString();
  }

  private popupTypeMessage = (popupType: PopupType) => {
    const baseUrl = getHyperLinkUrl(this.buildEnv);
    console.log("baseUrl", baseUrl);
    switch (popupType) {
      case PopupType.MESSAGE:
        return {
          title: "Click below to view message:",
          description: "",
          popupImgUrl: new URL("adapter-message.svg", baseUrl).toString(),
          buttonText: "View Message",
        };
      case PopupType.TRANSACTION:
        return {
          title: "View Transaction",
          description: "Click below to view and confirm your transaction:",
          popupImgUrl: new URL("adapter-wallet.svg", baseUrl).toString(),
          buttonText: "View Transaction",
        };
      case PopupType.LOGIN:
        return {
          title: "Login",
          description: "Click below to login:",
          popupImgUrl: new URL("adapter-wallet.svg", baseUrl).toString(),
          buttonText: "Login",
        };
      case PopupType.NOT_ALLOWLISTED:
        return {
          title: "Application not allowlisted",
          description:
            "Your application has not been allowlisted for the HyperLink Wallet Adapter. Please reach out to contact@tiplink.io for support",
        };
    }
  };

  private fadeIn(element: HTMLDivElement) {
    element.classList.remove("fade-out");
    element.classList.add("fade-in");
    element.style.display = "flex";
  }

  private fadeOut(element: HTMLDivElement, onFinished: () => void) {
    element.classList.remove("fade-in");
    element.classList.add("fade-out");
    const listener = (event: any) => {
      if (event.animationName === "fadeOut") {
        element.style.display = "none"; // Set display to none after fade-out
        element.removeEventListener("animationend", listener);
        onFinished();
      }
    };
    element.addEventListener("animationend", listener);
  }

  private _showSuccessToast(text: string): void {
    const innerContainer = htmlToElement<HTMLDivElement>(
      `<div id='hyperLinkSuccessToast__inner_container'>
        <img id="hyperLinkSuccessCheckmark__logo" src="${this.getGreenCheckmarkLogoUrl()}" />
        <p>${text}</p>
      </div>`
    );
    const removeToast = (element?: HTMLDivElement) => {
      if (element) {
        element.remove();
        if (
          this.hyperLinkToastContainer &&
          this.hyperLinkToastContainer.children.length === 0
        ) {
          this.hyperLinkToastContainer.style.display = "none";
        }
      }
    };
    const attachOnLoad = () => {
      if (this.hyperLinkToastContainer) {
        innerContainer.addEventListener("click", () => {
          removeToast(innerContainer);
        });
        this.hyperLinkToastContainer.appendChild(innerContainer);
      }
    };
    attachOnLoad();
    if (this.hyperLinkToastContainer) {
      this.hyperLinkToastContainer.style.display = "block";
      this.fadeIn(innerContainer);
      setTimeout(() => {
        if (innerContainer) {
          this.fadeOut(innerContainer, () => {
            removeToast(innerContainer);
          });
        }
      }, 10_000);
    }
  }

  private showHyperLinkAutoconnectToast = () => {
    this._showSuccessToast("Your HyperLink wallet is connected!");
  };

  private async _createPopupBlockAlert(
    onClick: () => void,
    onClose: () => void,
    popupType: PopupType
  ): Promise<void> {
    const modal = htmlToElement<HTMLDivElement>(
      "<div id='hyperLinkAlertModal'></div>"
    );
    const innerContainer = htmlToElement<HTMLDivElement>(
      "<div id='hyperLinkAlert__inner_container'></div>"
    );
    const overlay = htmlToElement<HTMLDivElement>(
      "<div id='hyperLinkAlert__modal_overlay'></div>"
    );

    const hyperLinkAlert = htmlToElement<HTMLDivElement>(
      '<div id="hyperLinkAlert" class="hyperLink-alert--v2"></div>'
    );

    const { description, title, popupImgUrl, buttonText } =
      this.popupTypeMessage(popupType);

    const hyperLinkMessageAndButtonContainer = htmlToElement<HTMLDivElement>(
      '<div id="hyperLinkAlert__message_btn_container">' +
        `<div id="hyperLinkAlert__message_container">` +
        `${
          popupImgUrl
            ? `<div id="hyperLinkLogo_container"><img id="hyperLinkAlert_logo" src="${popupImgUrl}"></img></div>`
            : ""
        }` +
        `<h1 id="hyperLinkAlert__title">${title}</h1>` +
        `${
          description ? `<p id="hyperLinkAlert__desc">${description}</p>` : ""
        }` +
        "</div>" +
        "</div>"
    );

    const successAlert = htmlToElement(
      `<div><button id="hyperLinkAlert__btn">${buttonText}</button></div>`
    );
    const btnContainer = htmlToElement(
      '<div id="hyperLinkAlert__btn-container"></div>'
    );

    const closeButtonIconUrl = getCloseButtonUrl(this.buildEnv);
    const closeButton = htmlToElement(
      `<div id="hyperLinkAlert__close-btn"><img id="hyperLinkAlert__close-btn-image" src="${closeButtonIconUrl}"/></div>`
    );
    if (buttonText) {
      btnContainer.appendChild(successAlert);
      hyperLinkMessageAndButtonContainer.appendChild(btnContainer);
    }
    hyperLinkAlert.appendChild(hyperLinkMessageAndButtonContainer);
    innerContainer.appendChild(hyperLinkAlert);
    innerContainer.appendChild(closeButton);
    modal.appendChild(innerContainer);
    modal.appendChild(overlay);

    const removePopupBlockedAlert = () => {
      modal.remove();
      if (
        this.hyperLinkAlertContainer &&
        this.hyperLinkAlertContainer.children.length === 0
      ) {
        this.hyperLinkAlertContainer.style.display = "none";
      }
    };

    const bindOnLoad = () => {
      btnContainer.addEventListener("click", () => {
        onClick();
        removePopupBlockedAlert();
      });
    };

    const bindCloseButton = () => {
      closeButton.addEventListener("click", () => {
        removePopupBlockedAlert();
        onClose();
      });
      overlay.addEventListener("mousedown", () => {
        removePopupBlockedAlert();
        onClose();
      });
    };

    const attachOnLoad = () => {
      if (this.hyperLinkAlertContainer) {
        this.hyperLinkAlertContainer.appendChild(modal);
      }
    };

    attachOnLoad();
    bindCloseButton();
    if (buttonText) {
      bindOnLoad();
    }
    if (this.hyperLinkAlertContainer) {
      this.hyperLinkAlertContainer.style.display = "block";
    }
  }

  private getQueryParams(): Record<string, string> {
    const params: Record<string, string> = {};
    const queryString = window.location.search.slice(1);
    queryString.split("&").forEach((pair) => {
      const [key, value] = pair.split("=");
      params[decodeURIComponent(key)] = decodeURIComponent(value);
    });
    return params;
  }

  private showIframe = () => {
    if (this.hyperLinkIframe) {
      this.hyperLinkIframe.style.display = "block";
    }
  };

  async init({
    directConnect,
    autoConnect: autoConnect,
    forceClickToContinue: forceClickToContinue,
    showErrorMessage,
    siwsInput,
    theme,
    hideDraggableWidget,
    hideWalletOnboard,
    onWalletHandshake,
  }: {
    directConnect: boolean;
    autoConnect?: boolean;
    forceClickToContinue?: boolean;
    showErrorMessage?: boolean;
    siwsInput?: CustomSolanaSignInInput;
    theme?: HyperLinkWalletAdapterTheme;
    hideDraggableWidget?: boolean;
    hideWalletOnboard?: boolean;
    onWalletHandshake: (methods: {
      showWallet: (page?: EmbeddedWalletPage) => void;
      hideWallet: () => void;
    }) => void;
  }): Promise<{
    pk: string;
    siwsOutput?: SolanaSignInOutput;
  }> {
    if (this.isDisallowed()) {
      this.notifyDisallowed();
      return Promise.reject(new Error("Application not allowlisted"));
    }

    const queryParams = this.getQueryParams();
    const promptHyperLinkAutoConnectFromRedirect =
      !!queryParams.promptHyperLinkAutoConnect;
    const hyperLinkAutoConnect = !!queryParams.hyperLinkAutoConnect;
    if (promptHyperLinkAutoConnectFromRedirect || hyperLinkAutoConnect) {
      directConnect = false;
      autoConnect = true;
    }
    let windowParams: WindowOpenParams | undefined = undefined;
    const isThemed = theme !== "system";
    if (directConnect && !promptHyperLinkAutoConnectFromRedirect) {
      windowParams = this.windowCommunicator.openPopup(
        `/embedded_adapter_login?ref=${window.location.origin}${
          //Note this is how this how tiplink is connecting
          isThemed ? `&theme=${theme}` : ""
        }`
      );
      if (!windowParams.popup || windowParams.popup.closed) {
        directConnect = false;
        forceClickToContinue = true;
      }
    }
    console.log(windowParams);
    const siwsInputPromise =
      typeof siwsInput === "function"
        ? siwsInput()
        : siwsInput
          ? Promise.resolve(siwsInput)
          : undefined;
    console.log("121");
    const hyperLinkUrl = iFrameUrl({
      buildEnv: this.buildEnv,
      clientId: this.clientId,
      walletAdapterNetwork: this._walletAdapterNetwork,
      autoConnect,
      hyperLinkAutoConnect,
      theme: theme && isThemed ? theme : undefined,
      hideDraggableWidget,
      hideWalletOnboard,
    });
    console.log("1212121", hyperLinkUrl);
    this.hyperLinkIframe = htmlToElement<HTMLIFrameElement>(
      `<iframe
        id="${iframeId(this.hyperLinkSessionId)}"
        class="hyperLinkIframe"
        allowtransparency="true"
        src="${hyperLinkUrl}"
        style="display: none; position: fixed; top: 0; right: 0; width: 100%; background-color: transparent;
        height: 100%; border: none; border-radius: 0; z-index: 2147483647; color-scheme: light; pointer-events: auto;"
      ></iframe>`
    );

    const cssLink = new URL("/css/widget.css", getHyperLinkUrl(this.buildEnv));
    this.styleLink = htmlToElement<HTMLLinkElement>(
      `<link href="${cssLink.toString()}" rel="stylesheet" type="text/css">`
    );

    this.hyperLinkAlertContainer = htmlToElement<HTMLDivElement>(
      `<div id="hyperLinkAlertContainer" style="display:none; z-index: 2147483647"></div>`
    );

    this.hyperLinkToastContainer = htmlToElement<HTMLDivElement>(
      `<div id="hyperLinkToastContainer" style="display:none; z-index: 2147483647"></div>`
    );

    let fnsAtEnd: (() => void)[] = [];
    let checkPopupClosed: NodeJS.Timeout | undefined = undefined;
    let checkUrlForPausedExecution: NodeJS.Timeout | undefined = undefined;
    let iframeNotLoading: NodeJS.Timeout | undefined = undefined;
    let doCheckUrlForPausedExecution = false;
    fnsAtEnd.push(() => {
      clearInterval(checkPopupClosed);
      clearInterval(checkUrlForPausedExecution);
      clearInterval(iframeNotLoading);
    });

    const handleSetup = async (): Promise<{
      pk: string;
      siwsOutput?: SolanaSignInOutput;
    }> => {
      return new Promise<{
        pk: string;
        siwsOutput?: SolanaSignInOutput;
      }>((resolve, reject) => {
        // console.log("actually RUNNING handle setup");
        if (directConnect) {
          checkUrlForPausedExecution = setInterval(() => {
            if (!doCheckUrlForPausedExecution) {
              return;
            }
            try {
              const url = this.hyperLinkIframe?.contentWindow?.document.URL;

              console.log("url", url);
              if (url === "about:blank") {
                console.log("got in");
                console.error("iframe is not loading");
                // it is possible in mobile safari that the iframe in the background tab doesn't
                // finish loading before the new window is opened. The window will then auto-close
                // due to a timeout, and we'll show the login page instead.
                clearInterval(checkUrlForPausedExecution);
                iframeNotLoading = setInterval(() => {
                  windowParams?.popup.postMessage(
                    { type: "iframe_not_loading" },
                    getHyperLinkUrl(this.buildEnv)
                  );
                }, 1_000);
              }
            } catch (error) {
              // best effort, no need to handle
            }
          }, 300);
          checkPopupClosed = setInterval(() => {
            if (!windowParams?.popup || windowParams?.popup.closed) {
              clearInterval(checkPopupClosed);
              try {
                const url = this.hyperLinkIframe?.contentWindow?.document?.URL;
                if (url === "about:blank") {
                  fnsAtEnd.forEach((fn) => fn());
                  fnsAtEnd = [];
                  this.clearElements();
                  this.init({
                    directConnect: false,
                    autoConnect: true,
                    forceClickToContinue: true,
                    showErrorMessage: true,
                    theme,
                    siwsInput,
                    hideDraggableWidget,
                    hideWalletOnboard,
                    onWalletHandshake,
                  })
                    .then((result) => {
                      resolve(result);
                    })
                    .catch((error) => {
                      reject(error);
                    });
                  return;
                }
              } catch {
                // best effort, no need to handle
              }

              if (this.hyperLinkIframe?.contentWindow) {
                this.windowCommunicator.singlePostToWindow(
                  this.hyperLinkIframe.contentWindow,
                  {
                    type: "click_to_continue",
                    title: this.title,
                  }
                );
                this.showIframe();
              }
            }
          }, 300);
        }
        try {
          if (this.hyperLinkIframe === undefined) {
            throw Error("hyperLinkIframe is undefined");
          }
          if (this.hyperLinkAlertContainer === undefined) {
            throw Error("hyperLinkAlertContainer is undefined");
          }
          if (this.hyperLinkToastContainer === undefined) {
            throw Error("hyperLinkToastContainer is undefined");
          }
          if (this.styleLink === undefined) {
            throw Error("hyperLinkStyles is undefined");
          }
          // const start = Date.now();
          // console.log("appending child to iframe at:", start);
          window.document.head.appendChild(this.styleLink);
          window.document.body.appendChild(this.hyperLinkIframe);
          window.document.body.appendChild(this.hyperLinkAlertContainer);
          window.document.body.appendChild(this.hyperLinkToastContainer);

          if (this.isDisallowed()) {
            this.notifyDisallowed();
            windowParams?.popup?.close();
            reject(new Error("Application not allowlisted"));
            return;
          }

          doCheckUrlForPausedExecution = true;

          let requestAnimationFrameTimeout: NodeJS.Timeout | undefined =
            undefined;
          const callback = (timestamp: number) => {
            // console.log("timestamp", timestamp);
            if (timestamp) {
              clearTimeout(requestAnimationFrameTimeout);
              doCheckUrlForPausedExecution = false;
              setTimeout(() => {
                // console.log(
                //   "started nested request animation frame",
                //   Date.now()
                // );
                // It is possible that the iframe loads a bit at first,
                // so we set doCheckUrlForPausedExecution to false. However,
                // we try requesting animation frame again shortly after
                // and if times out, we set doCheckUrlForPausedExecution to true
                // so that in the `checkUrlForPausedExecution` interval above it
                // will indeed check. Note that we're not overly worried about
                // this flag changing back to true unncessarily because we have the
                // iframe url check against about:blank in the `checkUrlForPausedExecution`
                // interval above
                requestAnimationFrameTimeout = setTimeout(() => {
                  // console.log("Hit timeout at", Date.now());
                  doCheckUrlForPausedExecution = true;
                }, 500);
                window.requestAnimationFrame(callback);
              }, 300);
            }
          };
          window.requestAnimationFrame(callback);

          this.hyperLinkIframe.addEventListener("load", async () => {
            if (!this.hyperLinkIframe) {
              throw Error("hyperLinkIframe is undefined");
            }
            if (this.hyperLinkIframe.contentWindow === null) {
              throw Error("hyperLinkIframe.contentWindow is null");
            }

            this.showIframe();

            let postReadyInterval: NodeJS.Timeout | undefined = undefined;
            let windowPost: PostFn | undefined = undefined;

            if (windowParams?.popup && !windowParams.popup.closed) {
              const { post, close } =
                // TODO: this abstraction kind of sucks, this should not require an await
                await this.windowCommunicator.setupHandshakeWithWindowParams(
                  windowParams,
                  {
                    window_ack: {
                      type: CallbackType.DEFAULT,
                      cb: async (data: any) => {
                        // console.log("received window ack", data);
                        clearInterval(postReadyInterval);
                      },
                    },
                    done: {
                      type: CallbackType.DEFAULT,
                      cb: async (data: any) => {
                        // console.log("!!received done", data);
                        this.showIframe();
                        close();
                      },
                    },
                  },
                  ["done"]
                );
              // console.log("got window post function!!");
              windowPost = post;
            }

            // console.log("!!! setting up handhsake with iframe!!");
            const { close: closeIframeChannel } =
              this.windowCommunicator.setupHandshakeWithIframe(
                this.hyperLinkIframe,
                {
                  ready: {
                    type: CallbackType.DEFAULT,
                    cb: async (data: any) => {
                      // console.log('received "ready" message from iframe', data);
                      if (this.hyperLinkIframe?.contentWindow) {
                        this.windowCommunicator.singlePostToWindow(
                          this.hyperLinkIframe.contentWindow,
                          {
                            type: "ack",
                            title: this.title,
                            dAppSessionId: this.dAppSessionId,
                            hyperLinkSessionId: this.hyperLinkSessionId,
                          }
                        );
                      }
                      // TODO: use better flag to send to window post
                      // console.log("sending ready messages to window!");
                      windowPost?.({
                        type: "ready",
                        dAppSessionId: this.dAppSessionId,
                        hyperLinkSessionId: this.hyperLinkSessionId,
                      });
                      if (windowPost) {
                        postReadyInterval = setInterval(() => {
                          windowPost?.({
                            type: "ready",
                            dAppSessionId: this.dAppSessionId,
                            hyperLinkSessionId: this.hyperLinkSessionId,
                          });
                        }, 200);
                      }

                      if (
                        (directConnect &&
                          (!windowParams?.popup ||
                            windowParams.popup.closed)) ||
                        forceClickToContinue
                      ) {
                        clearInterval(checkPopupClosed);
                        if (this.hyperLinkIframe?.contentWindow) {
                          this.windowCommunicator.singlePostToWindow(
                            this.hyperLinkIframe.contentWindow,
                            {
                              type: "click_to_continue",
                              showErrorMessage,
                              title: this.title,
                            }
                          );
                        }
                        this.showIframe();
                      } else if (
                        !directConnect &&
                        !promptHyperLinkAutoConnectFromRedirect
                      ) {
                        clearInterval(checkPopupClosed);
                        // console.log("TRYING TO SINGLE POST!");
                        if (this.hyperLinkIframe?.contentWindow) {
                          this.windowCommunicator.singlePostToWindow(
                            this.hyperLinkIframe.contentWindow,
                            {
                              type: "embedded_login",
                            }
                          );
                        }
                        // console.log(
                        //   "displaying iframe for embedded_login after",
                        //   Date.now() - start
                        // );
                        this.showIframe();
                      } else if (promptHyperLinkAutoConnectFromRedirect) {
                        clearInterval(checkPopupClosed);
                        if (this.hyperLinkIframe?.contentWindow) {
                          this.windowCommunicator.singlePostToWindow(
                            this.hyperLinkIframe.contentWindow,
                            {
                              type: "tiplink_autoconnect_from_redirect",
                              title: this.title,
                            }
                          );
                        }
                        // console.log(
                        //   "displaying iframe for tiplink autoconnect from redirect after",
                        //   Date.now() - start
                        // );
                        this.showIframe();
                      }
                    },
                  },
                  ready_for_tiplink_autoconnect: {
                    type: CallbackType.DEFAULT,
                    cb: async (data: any) => {
                      // console.log(
                      //   "received ready_for_tiplink_autoconnect",
                      //   data
                      // );
                      if (this.hyperLinkIframe?.contentWindow) {
                        this.windowCommunicator.singlePostToWindow(
                          this.hyperLinkIframe.contentWindow,
                          {
                            type: "ack",
                            title: this.title,
                          }
                        );
                      }
                    },
                  },
                  loaded_public_key: {
                    type: CallbackType.DEFAULT,
                    cb: async (data: any) => {
                      clearInterval(checkPopupClosed);
                      // console.log("RECEIVED LOADED PUBLIC_KEY");
                      this.hideIframe();
                      if (this.hyperLinkIframe?.contentWindow) {
                        this.windowCommunicator.singlePostToWindow(
                          this.hyperLinkIframe.contentWindow,
                          {
                            type: "ack_loaded_public_key",
                            title: this.title,
                            dAppSessionId: this.dAppSessionId,
                            hyperLinkSessionId: this.hyperLinkSessionId,
                          }
                        );
                      }
                      // console.log(
                      //   'received "loaded_public_key" message from iframe',
                      //   data.publicKey
                      // );
                      this.publicKeyString = data.publicKey;
                      if (siwsInputPromise) {
                        const siwsOutput = await this._signIn(
                          siwsInputPromise,
                          true
                        );
                        if (!siwsOutput) {
                          reject(new Error("missing siwsOutput"));
                        }
                        resolve({
                          pk: data.publicKey,
                          siwsOutput,
                        });
                      }
                      resolve({
                        pk: data.publicKey,
                      });
                    },
                  },
                  public_key: {
                    type: CallbackType.DEFAULT,
                    cb: async (data: any) => {
                      clearInterval(checkPopupClosed);
                      // console.log("RECEIVED PUBLIC_KEY");
                      this.hideIframe();
                      // console.log(
                      //   'received "public_key" message from iframe',
                      //   data.publicKey
                      // );
                      this.publicKeyString = data.publicKey;
                      if (
                        promptHyperLinkAutoConnectFromRedirect ||
                        hyperLinkAutoConnect
                      ) {
                        this.showHyperLinkAutoconnectToast();
                      }
                      if (siwsInputPromise) {
                        const siwsOutput = await this._signIn(
                          siwsInputPromise,
                          true
                        );
                        if (!siwsOutput) {
                          reject(new Error("missing siwsOutput"));
                        }
                        resolve({
                          pk: data.publicKey,
                          siwsOutput,
                        });
                      }
                      resolve({
                        pk: data.publicKey,
                      });
                    },
                  },
                  cancel_connect: {
                    type: CallbackType.DEFAULT,
                    cb: async (data: any) => {
                      // console.log("RECEIVED CANCEL_CONNECT");
                      this.hideIframe();
                      windowParams?.popup?.close();
                      this.cleanUp();
                      reject(new Error("user clicked close button in iframe"));
                    },
                  },
                  focus_login: {
                    type: CallbackType.DEFAULT,
                    cb: async (data: any) => {
                      windowParams?.popup?.focus();
                    },
                  },
                },
                ["public_key", "cancel_connect", "loaded_public_key"]
              );
            fnsAtEnd.push(closeIframeChannel);
          });
        } catch (error) {
          // console.log("REJECTING error", error);
          // console.log("rejected via errior");
          reject(error);
        }
      });
    };
    // console.log("readying document");
    await documentReady();
    // console.log("handling setup");
    return handleSetup()
      .then((result) => {
        fnsAtEnd.forEach((fn) => fn());
        return result;
      })
      .then((result) => {
        let handshake:
          | {
              post: PostFn;
              close: CloseFn;
            }
          | undefined;
        if (this.hyperLinkIframe?.contentWindow) {
          handshake = this.windowCommunicator.setupHandshakeWithIframe(
            this.hyperLinkIframe,
            {
              show_wallet: {
                type: CallbackType.DEFAULT,
                cb: async () => {
                  this.showIframe();
                },
              },
              hide_wallet: {
                type: CallbackType.DEFAULT,
                cb: async () => {
                  this.hideIframe();
                },
              },
              hide_wallet_notification: {
                type: CallbackType.DEFAULT,
                cb: async () => {
                  this.hideWidgetNotificationUi();
                },
              },
              show_wallet_notification: {
                type: CallbackType.DEFAULT,
                cb: async () => {
                  this.showWidgetNotificationUi();
                },
              },
            },
            []
          );
          if (handshake) {
            onWalletHandshake({
              showWallet: (page?: EmbeddedWalletPage) => {
                switch (page) {
                  case EmbeddedWalletPage.ADD_FUNDS:
                  case EmbeddedWalletPage.SWAP:
                  case EmbeddedWalletPage.WITHDRAW:
                    handshake?.post({ type: "show_wallet", page });
                    break;
                  case EmbeddedWalletPage.OVERVIEW:
                  default:
                    handshake?.post({ type: "show_wallet" });
                }
              },
              hideWallet: () => {
                handshake?.post({ type: "hide_wallet" });
              },
            });
          }
          this._walletHandshake = handshake;
        }
        // skip wallet widget setup if unwanted (effectively hides widget)
        if (hideDraggableWidget) return result;
        // setup wallet widget
        this.hyperLinkDraggableWidget = setupWalletWidget({
          onDragStart: () => {
            this._isDragging = true;
          },
          onDragEnd: () => {
            this._isDragging = false;
          },
          isDragging: () => this._isDragging,
          setInteractable: (interactable: Interact.Interactable) => {
            this._interactable = interactable;
          },
          handleWidgetClick: () => {
            if (this._walletHandshake) {
              this._walletHandshake.post({ type: "show_wallet" });
            } else {
              // fallback re-establish handshake
              if (this.hyperLinkIframe?.contentWindow) {
                const handshake:
                  | {
                      post: PostFn;
                      close: CloseFn;
                    }
                  | undefined =
                  this.windowCommunicator.setupHandshakeWithIframe(
                    this.hyperLinkIframe,
                    {
                      show_wallet: {
                        type: CallbackType.DEFAULT,
                        cb: async () => {
                          this.showIframe();
                        },
                      },
                      hide_wallet: {
                        type: CallbackType.DEFAULT,
                        cb: async () => {
                          this.hideIframe();
                        },
                      },
                      hide_wallet_notification: {
                        type: CallbackType.DEFAULT,
                        cb: async () => {
                          this.hideWidgetNotificationUi();
                        },
                      },
                      show_wallet_notification: {
                        type: CallbackType.DEFAULT,
                        cb: async () => {
                          this.showWidgetNotificationUi();
                        },
                      },
                    },
                    []
                  );
                if (handshake) {
                  onWalletHandshake({
                    showWallet: (page?: EmbeddedWalletPage) => {
                      switch (page) {
                        case EmbeddedWalletPage.ADD_FUNDS:
                        case EmbeddedWalletPage.SWAP:
                        case EmbeddedWalletPage.WITHDRAW:
                          handshake?.post({ type: "show_wallet", page });
                          break;
                        case EmbeddedWalletPage.OVERVIEW:
                        default:
                          handshake?.post({ type: "show_wallet" });
                      }
                    },
                    hideWallet: () => {
                      handshake?.post({ type: "hide_wallet" });
                    },
                  });
                  handshake.post({ type: "show_wallet" });
                  this._walletHandshake = handshake;
                }
              }
            }
          },
          theme: this.theme,
          windowDraggableResizeListener:
            this.draggableWidgetWindowResizeListener,
          windowDraggableScrollListener:
            this.draggableWidgetWindowScrollListener,
          hyperLinkSessionId: this.hyperLinkSessionId,
        });
        return result;
      });
  }

  async cleanUp(): Promise<void> {
    // console.log("cleaning up");
    if (this.hyperLinkIframe) {
      const iFrame = this.hyperLinkIframe;
      await new Promise<void>((resolve) => {
        const { post: postToIframe } =
          this.windowCommunicator.setupHandshakeWithIframe(
            iFrame,
            {
              disconnected: {
                type: CallbackType.DEFAULT,
                cb: async () => {
                  resolve();
                },
              },
            },
            ["disconnected"]
          );
        postToIframe({ type: "disconnect" });
      });
    }
    this.publicKeyString = undefined;
    this.clearElements();
  }

  clearElements(): void {
    localStorage.removeItem("hyperLink_pk_connected");
    tearDownWalletWidget(
      this.draggableWidgetWindowResizeListener,
      this.draggableWidgetWindowScrollListener,
      this._interactable,
      this.hyperLinkDraggableWidget
    );

    if (
      this.styleLink &&
      isElement(this.styleLink) &&
      window.document.head.contains(this.styleLink)
    ) {
      this.styleLink.remove();
      this.styleLink = undefined;
    }
    if (
      this.hyperLinkIframe &&
      isElement(this.hyperLinkIframe) &&
      window.document.body.contains(this.hyperLinkIframe)
    ) {
      this.hyperLinkIframe.remove();
      this.hyperLinkIframe = undefined;
    }
    if (
      this.hyperLinkAlertContainer &&
      isElement(this.hyperLinkAlertContainer) &&
      window.document.body.contains(this.hyperLinkAlertContainer)
    ) {
      this.hyperLinkAlertContainer.remove();
      this.hyperLinkAlertContainer = undefined;
    }
    if (
      this.hyperLinkToastContainer &&
      isElement(this.hyperLinkToastContainer) &&
      window.document.body.contains(this.hyperLinkToastContainer)
    ) {
      this.hyperLinkToastContainer.remove();
      this.hyperLinkToastContainer = undefined;
    }
    removePreviousWindowRef(HyperLinkInstanceKey.EMBED);
  }

  // eslint-disable-next-line @typescript-eslint/require-await
  async buildTransactionMessage(
    transaction: Transaction | VersionedTransaction
  ): Promise<{
    message: string;
  }> {
    if (isVersionedTransaction(transaction)) {
      return {
        message: Buffer.from(transaction.serialize()).toString("base64"),
      };
    }
    return {
      message: transaction
        .serialize({ requireAllSignatures: false })
        .toString("base64"),
    };
  }

  async _signTransaction({
    transaction,
    doSend,
  }: {
    transaction: Transaction | VersionedTransaction;
    doSend: boolean;
  }): Promise<string> {
    this.extendSession();
    // console.log("signing transaction");
    const msg = await this.buildTransactionMessage(transaction);
    return await new Promise<string>((resolve, reject) => {
      if (!this.hyperLinkIframe) {
        reject(new Error("iframe is missing"));
        return;
      }
      this.showIframe();
      const requestId = uuid();
      const { post } = this.windowCommunicator.setupHandshakeWithIframe(
        this.hyperLinkIframe,
        {
          signed_transaction: {
            type: CallbackType.DEFAULT,
            cb: async (data: any) => {
              this.hideIframe();
              resolve(data.signed_transaction);
            },
          },
          transaction_closed: {
            type: CallbackType.DEFAULT,
            cb: async () => {
              this.hideIframe();
              reject(new Error("User rejected transaction"));
            },
          },
          sign_error: {
            type: CallbackType.DEFAULT,
            cb: async (data: any) => {
              this.hideIframe();

              if (data && "message" in data) {
                reject(new Error(data.message));
              }

              reject(new Error("Unknown error while signing transaction"));
            },
          },
        },
        ["signed_transaction", "transaction_closed", "sign_error"],
        requestId
      );
      post({
        ...msg,
        type: "sign_transaction",
        doSend,
        requestId,
      });
    });
  }

  transactionFromString(
    isVersioned: boolean,
    signedTransactionMsg: string
  ): Transaction | VersionedTransaction {
    if (isVersioned) {
      return VersionedTransaction.deserialize(
        Buffer.from(signedTransactionMsg, "base64")
      );
    } else {
      return Transaction.from(Buffer.from(signedTransactionMsg, "base64"));
    }
  }

  async signTransaction<T extends Transaction | VersionedTransaction>(
    transaction: T
  ): Promise<T> {
    const signedTransaction = await this._signTransaction({
      transaction,
      doSend: false,
    });
    return this.transactionFromString(
      isVersionedTransaction(transaction),
      signedTransaction
    ) as T;
  }

  async signAllTransactions<T extends Transaction | VersionedTransaction>(
    transactions: T[]
  ): Promise<T[]> {
    this.extendSession();

    const messages = await Promise.all(
      transactions.map(async (transaction) => {
        const isVersioned = isVersionedTransaction(transaction);
        const { message } = await this.buildTransactionMessage(transaction);
        return {
          message,
          isVersioned,
        };
      })
    );

    const signedTxnMessages = await new Promise<string[]>((resolve, reject) => {
      if (!this.hyperLinkIframe) {
        reject(new Error("iframe is missing"));
        return;
      }
      this.showIframe();
      const requestId = uuid();
      const { post } = this.windowCommunicator.setupHandshakeWithIframe(
        this.hyperLinkIframe,
        {
          signed_transactions: {
            type: CallbackType.DEFAULT,
            cb: async (data: any) => {
              this.hideIframe();
              resolve(data.signed_transactions);
            },
          },
          transaction_closed: {
            type: CallbackType.DEFAULT,
            cb: async () => {
              this.hideIframe();
              reject(new Error("User rejected transaction"));
            },
          },
          sign_error: {
            type: CallbackType.DEFAULT,
            cb: async (data: any) => {
              this.hideIframe();

              if (data && "message" in data) {
                reject(new Error(data.message));
              } else {
                reject(
                  new Error("Unknown error while signing transaction messages")
                );
              }
            },
          },
        },
        ["signed_transactions", "transaction_closed", "sign_error"],
        requestId
      );
      post({
        type: "sign_all_transactions",
        messages: messages.map((msg) => msg.message),
        requestId,
      });
    });

    return signedTxnMessages.map((signedTxnMsg, i) => {
      return this.transactionFromString(
        messages[i].isVersioned,
        signedTxnMsg
      ) as T;
    });
  }

  private async _signMessage(
    message: Uint8Array,
    type: string,
    skipConfirm?: boolean
  ): Promise<{ data: Uint8Array; extraInfo: any }> {
    return new Promise<{ data: Uint8Array; extraInfo: any }>(
      (resolve, reject) => {
        // TODO: do we still need to extend session
        if (!this.hyperLinkIframe) {
          reject(new Error("iframe is missing"));
          return;
        }
        this.extendSession();
        const requestId = uuid();
        const { post } = this.windowCommunicator.setupHandshakeWithIframe(
          this.hyperLinkIframe,
          {
            signed_message: {
              type: CallbackType.DEFAULT,
              cb: async (data: any) => {
                this.hideIframe();
                const signedMessage = Buffer.from(
                  data.signed_message,
                  "base64"
                );
                resolve({ data: signedMessage, extraInfo: data.extraInfo });
              },
            },
            message_closed: {
              type: CallbackType.DEFAULT,
              cb: async () => {
                this.hideIframe();
                reject(new Error("User rejected message"));
              },
            },
            sign_error: {
              type: CallbackType.DEFAULT,
              cb: async (data: any) => {
                this.hideIframe();

                if (data && "message" in data) {
                  reject(new Error(data.message));
                } else {
                  reject(new Error("Unknown error while signing message"));
                }
              },
            },
          },
          ["signed_message", "message_closed", "sign_error"],
          requestId
        );
        this.showIframe();
        post({
          message: Buffer.from(message).toString("base64"),
          type,
          requestId,
          skipConfirm,
        });
      }
    );
  }

  async signMessage(message: Uint8Array): Promise<{ signature: Uint8Array }> {
    const { data } = await this._signMessage(message, "sign_message");
    return { signature: data };
  }

  private async _signIn(
    customInput?: Promise<SolanaSignInInput>,
    skipConfirm?: boolean
  ): Promise<SolanaSignInOutput> {
    const input = await customInput;
    const publicKeyAddress = input?.address || this.publicKeyString;
    if (!publicKeyAddress) {
      throw new Error("not connected!");
    }
    const domain = input?.domain || window.location.host;
    if (!domain) {
      throw new Error("no domain found!");
    }
    const siwsRequiredFields = {
      ...input,
      domain,
      address: publicKeyAddress,
    } as SolanaSignInInputWithRequiredFields;
    const signInMessage = createSignInMessage(siwsRequiredFields);
    const { data: signature, extraInfo } = await this._signMessage(
      signInMessage,
      "siws",
      skipConfirm
    );
    return {
      account: new ReadonlyWalletAccount({
        address: publicKeyAddress,
        publicKey: new PublicKey(publicKeyAddress).toBytes(),
        chains: [SOLANA_MAINNET_CHAIN],
        // These must be included, otherwise the Standard Wallet Adapter
        // will assume these features don't exist on the wallet adapter
        features: [
          SolanaSignAndSendTransaction,
          SolanaSignTransaction,
          SolanaSignMessage,
          SolanaSignIn,
        ],
      }),
      signedMessage: signInMessage,
      signature,
      // @ts-ignore
      extraInfo,
    };
  }

  async signIn(
    input?: Promise<SolanaSignInInput>
  ): Promise<SolanaSignInOutput> {
    return this._signIn(input);
  }

  // This is copied from the `sendTransaction` method in BaseSignerWalletAdapter,
  // with the changes to use our own internal _signTransaction method, and to pass in the
  // cluster nodes for the connectino that was passed into `sendTransaction`.
  // we also don't emit an error since the method calling this is responsible for that.
  async sendTransaction<T extends Transaction | VersionedTransaction>(
    transaction: T,
    prepareTransaction: (
      transaction: Transaction,
      connection: Connection,
      sendOptions: Omit<SendTransactionOptions, "signers">
    ) => Promise<Transaction>,
    connection: Connection,
    options: SendTransactionOptions = {}
  ): Promise<TransactionSignature> {
    if (isVersionedTransaction(transaction)) {
      try {
        const transactionString = await this._signTransaction({
          transaction,
          doSend: true,
        });

        const rawTransaction = Buffer.from(transactionString, "base64");

        return await connection.sendRawTransaction(rawTransaction, options);
      } catch (error: any) {
        if (error instanceof WalletSignTransactionError) {
          throw error;
        }
        throw new WalletSendTransactionError(error?.message, error);
      }
    } else {
      try {
        const { signers, ...sendOptions } = options;

        const txn = await prepareTransaction(
          transaction as Transaction,
          connection,
          sendOptions
        );

        signers?.length && txn.partialSign(...signers);

        const transactionString = await this._signTransaction({
          transaction: txn,
          doSend: true,
        });

        const rawTransaction = Buffer.from(transactionString, "base64");

        return await connection.sendRawTransaction(rawTransaction, sendOptions);
      } catch (error: any) {
        if (error instanceof WalletSignTransactionError) {
          throw error;
        }
        throw new WalletSendTransactionError(error?.message, error);
      }
    }
  }

  notifyDisallowed() {
    try {
      this.clearElements();
    } catch {
      // best effort
    }
    console.error(
      window.location.origin,
      "not allowlisted – please contact the HyperLink team at contact@tiplink.io to be added."
    );
    showDialog(
      this.buildEnv,
      `<p>${window.location.origin} does not have access yet ` +
        "to use the HyperLink Wallet Adapter. Please reach out to the " +
        'HyperLink team at <a style="text-decoration: underline;" href="mailto:contact@tiplink.io" target="_blank"> ' +
        "contact@tiplink.io</a> or reach out via our " +
        '<a style="text-decoration: underline;" href="https://discord.com/invite/4bXYT7dxR3" target="_blank" >' +
        "discord</a>.</p>"
    );
  }
}
